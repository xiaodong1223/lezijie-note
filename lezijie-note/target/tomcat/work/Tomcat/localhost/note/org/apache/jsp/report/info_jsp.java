/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2022-03-22 07:05:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.report;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class info_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"col-md-9\">\r\n");
      out.write("    <div class=\"data_list\">\r\n");
      out.write("        <div class=\"data_list_title\"><span class=\"glyphicon glyphicon-signal\"></span>&nbsp;数据报表 </div>\r\n");
      out.write("        <div class=\"container-fluid\">\r\n");
      out.write("            <div class=\"row\" style=\"padding-top: 20px;\">\r\n");
      out.write("                <div class=\"col-md-12\">\r\n");
      out.write("                    ");
      out.write("\r\n");
      out.write("                    <div id=\"monthChart\" style=\"height: 500px\"></div>\r\n");
      out.write("\r\n");
      out.write("                    ");
      out.write("\r\n");
      out.write("                    <h3 align=\"center\">用户地区分布图</h3>\r\n");
      out.write("                    ");
      out.write("\r\n");
      out.write("                    <div id=\"baiduMap\" style=\"height: 600px;width: 100%;\"></div>\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"statics/echarts/echarts.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://api.map.baidu.com/api?v=1.0&&type=webgl&ak=jVoWdHh6zOTO4nnqdGg57mWoQRX5XHq7\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("    /**\r\n");
      out.write("     * 通过月份查询对应的云记数量\r\n");
      out.write("     */\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type:\"get\",\r\n");
      out.write("        url:\"report\",\r\n");
      out.write("        data:{\r\n");
      out.write("            actionName:\"month\"\r\n");
      out.write("        },\r\n");
      out.write("        success:function (result) {\r\n");
      out.write("            console.log(result);\r\n");
      out.write("            if (result.code == 1) {\r\n");
      out.write("                // 得到月份 （得到X轴的数据）\r\n");
      out.write("                var monthArray = result.result.monthArray;\r\n");
      out.write("                // 得到月份对应的云记数量 （得到Y轴的数据）\r\n");
      out.write("                var dataArray = result.result.dataArray;\r\n");
      out.write("                // 加载柱状图\r\n");
      out.write("                loadMonthChart(monthArray, dataArray);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    /**\r\n");
      out.write("     * 加载柱状图\r\n");
      out.write("     */\r\n");
      out.write("    function loadMonthChart(monthArray, dataArray) {\r\n");
      out.write("        // 基于准备好的dom，初始化echarts实例\r\n");
      out.write("        var myChart = echarts.init(document.getElementById('monthChart'));\r\n");
      out.write("\r\n");
      out.write("        // 指定图表的配置项和数据\r\n");
      out.write("        // X轴显示名称\r\n");
      out.write("        var dataAxis = monthArray;\r\n");
      out.write("        // Y轴的数据\r\n");
      out.write("        var data = dataArray;\r\n");
      out.write("        var yMax = 30;\r\n");
      out.write("        var dataShadow = [];\r\n");
      out.write("\r\n");
      out.write("        for (var i = 0; i < data.length; i++) {\r\n");
      out.write("            dataShadow.push(yMax);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        var option = {\r\n");
      out.write("            // 标题\r\n");
      out.write("            title: {\r\n");
      out.write("                text: '按月统计', // 主标题\r\n");
      out.write("                subtext: '通过月份查询对应的云记数量', // 副标题\r\n");
      out.write("                left:'center' // 标题对齐方式，center表示居中\r\n");
      out.write("            },\r\n");
      out.write("            // 提示框\r\n");
      out.write("            tooltip:{},\r\n");
      out.write("            /*legend:{\r\n");
      out.write("                data:['月份'],\r\n");
      out.write("            },*/\r\n");
      out.write("            // X轴\r\n");
      out.write("            xAxis: {\r\n");
      out.write("                data: dataAxis,\r\n");
      out.write("                axisTick: {\r\n");
      out.write("                    show: false\r\n");
      out.write("                },\r\n");
      out.write("                axisLine: {\r\n");
      out.write("                    show: false\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            // Y轴\r\n");
      out.write("            yAxis: {\r\n");
      out.write("                axisLine: {\r\n");
      out.write("                    show: false\r\n");
      out.write("                },\r\n");
      out.write("                axisTick: {\r\n");
      out.write("                    show: false\r\n");
      out.write("                },\r\n");
      out.write("                axisLabel: {\r\n");
      out.write("                    textStyle: {\r\n");
      out.write("                        color: '#999'\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            dataZoom: [\r\n");
      out.write("                {\r\n");
      out.write("                    type: 'inside'\r\n");
      out.write("                }\r\n");
      out.write("            ],\r\n");
      out.write("            // 系列\r\n");
      out.write("            series: [\r\n");
      out.write("                { // For shadow\r\n");
      out.write("                    type: 'bar', // 柱状图\r\n");
      out.write("                    data: data, // Y轴的数据\r\n");
      out.write("                    itemStyle: {\r\n");
      out.write("                        color: 'rgba(0,0,0,0.05)'\r\n");
      out.write("                    },\r\n");
      out.write("                    barGap: '-100%',\r\n");
      out.write("                    barCategoryGap: '40%',\r\n");
      out.write("                    data: dataShadow,\r\n");
      out.write("                    animation: false\r\n");
      out.write("                },\r\n");
      out.write("                {\r\n");
      out.write("                    type: 'bar',\r\n");
      out.write("                    data: data, // Y轴的数据\r\n");
      out.write("                    // name:'月份',\r\n");
      out.write("                    itemStyle: {\r\n");
      out.write("                        color: new echarts.graphic.LinearGradient(\r\n");
      out.write("                            0, 0, 0, 1,\r\n");
      out.write("                            [\r\n");
      out.write("                                {offset: 0, color: '#83bff6'},\r\n");
      out.write("                                {offset: 0.5, color: '#188df0'},\r\n");
      out.write("                                {offset: 1, color: '#188df0'}\r\n");
      out.write("                            ]\r\n");
      out.write("                        )\r\n");
      out.write("                    },\r\n");
      out.write("                    emphasis: {\r\n");
      out.write("                        itemStyle: {\r\n");
      out.write("                            color: new echarts.graphic.LinearGradient(\r\n");
      out.write("                                0, 0, 0, 1,\r\n");
      out.write("                                [\r\n");
      out.write("                                    {offset: 0, color: '#2378f7'},\r\n");
      out.write("                                    {offset: 0.7, color: '#2378f7'},\r\n");
      out.write("                                    {offset: 1, color: '#83bff6'}\r\n");
      out.write("                                ]\r\n");
      out.write("                            )\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                }\r\n");
      out.write("            ]\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 使用刚指定的配置项和数据显示图表。\r\n");
      out.write("        myChart.setOption(option);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    /**\r\n");
      out.write("     * 通过用户发布的坐标查询\r\n");
      out.write("     */\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type:\"get\",\r\n");
      out.write("        url:\"report\",\r\n");
      out.write("        data:{\r\n");
      out.write("            actionName:\"location\"\r\n");
      out.write("        },\r\n");
      out.write("        success:function (result){\r\n");
      out.write("            console.log(result);\r\n");
      out.write("            if (result.code == 1) {\r\n");
      out.write("                // 加载百度地图\r\n");
      out.write("                loadBaiduMap(result.result)\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    loadBaiduMap();\r\n");
      out.write("\r\n");
      out.write("    /**\r\n");
      out.write("     * 加载百度地图\r\n");
      out.write("     */\r\n");
      out.write("    function loadBaiduMap(markers) {\r\n");
      out.write("        //加载地图实例\r\n");
      out.write("\r\n");
      out.write("        var map = new BMapGL.Map(\"baiduMap\");\r\n");
      out.write("        // 设置地图的中心点\r\n");
      out.write("        var point = new BMapGL.Point(116.404, 39.915);\r\n");
      out.write("        // 地图初始化，BMapGL.Map.centerAndZoom()方法要求设置中心点坐标和地图级别\r\n");
      out.write("        map.centerAndZoom(point, 10);\r\n");
      out.write("        // 开启鼠标滚轮缩放\r\n");
      out.write("        map.enableScrollWheelZoom(true);\r\n");
      out.write("        //将地图模型改为地球\r\n");
      out.write("        // map.setMapType(BMAP_EARTH_MAP);\r\n");
      out.write("        // 添加比例尺控件\r\n");
      out.write("        var zoomCtrl = new BMapGL.ZoomControl();\r\n");
      out.write("        map.addControl(zoomCtrl);\r\n");
      out.write("        // 判断是否有点标记\r\n");
      out.write("        if (markers != null && markers.length > 0) { // 集合中第一个坐标时用户当前所在位置，其他的事云记记录中的对应的经纬度\r\n");
      out.write("            // 将用户所在的位置设置为中心点\r\n");
      out.write("            map.centerAndZoom(new BMapGL.Point(markers[0].lon, markers[0].lat), 10);\r\n");
      out.write("            // 循环在地图上添加点标记\r\n");
      out.write("            for (var i = 1; i < markers.length; i++) {\r\n");
      out.write("                // 创建点标记\r\n");
      out.write("                var marker = new BMapGL.Marker(new BMapGL.Point(markers[i].lon, markers[i].lat));\r\n");
      out.write("                // 在地图上添加点标记\r\n");
      out.write("                map.addOverlay(marker);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
